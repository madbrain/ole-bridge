
#ifndef COMPONENT_H
#define COMPONENT_H

#include "interfaces.h"

class Component : public IOleObject, public IPersistStorage, public IDataObject {
public:
	Component();
	virtual ~Component();
	
	STDMETHODIMP QueryInterface(REFIID riid, void ** ppAny);
	STDMETHODIMP_(ULONG) AddRef();
	STDMETHODIMP_(ULONG) Release();

	// IOleObject
	STDMETHODIMP SetClientSite(LPOLECLIENTSITE);
	STDMETHODIMP GetClientSite(LPOLECLIENTSITE*);
	STDMETHODIMP SetHostNames(LPCOLESTR,LPCOLESTR);
	STDMETHODIMP Close(DWORD);
	STDMETHODIMP SetMoniker(DWORD,LPMONIKER);
	STDMETHODIMP GetMoniker(DWORD,DWORD,LPMONIKER*);
	STDMETHODIMP InitFromData(LPDATAOBJECT,BOOL,DWORD);
	STDMETHODIMP GetClipboardData(DWORD,LPDATAOBJECT*);
	STDMETHODIMP DoVerb(LONG,LPMSG,LPOLECLIENTSITE,LONG,HWND,LPCRECT);
	STDMETHODIMP EnumVerbs(LPENUMOLEVERB*);
	STDMETHODIMP Update();
	STDMETHODIMP IsUpToDate();
	STDMETHODIMP GetUserClassID(LPCLSID);
	STDMETHODIMP GetUserType(DWORD,LPOLESTR*);
	STDMETHODIMP SetExtent(DWORD,SIZEL*);
	STDMETHODIMP GetExtent(DWORD,SIZEL*);
	STDMETHODIMP Advise(LPADVISESINK,PDWORD);
	STDMETHODIMP Unadvise(DWORD);
	STDMETHODIMP EnumAdvise(LPENUMSTATDATA*);
	STDMETHODIMP GetMiscStatus(DWORD,PDWORD);
	STDMETHODIMP SetColorScheme(LPLOGPALETTE);
	
	// IPersistStorage
	STDMETHODIMP GetClassID(CLSID*);
	STDMETHODIMP IsDirty();
	STDMETHODIMP InitNew(LPSTORAGE);
	STDMETHODIMP Load(LPSTORAGE);
	STDMETHODIMP Save(LPSTORAGE,BOOL);
	STDMETHODIMP SaveCompleted(LPSTORAGE);
	STDMETHODIMP HandsOffStorage();
	
	// IDataObject
	STDMETHODIMP GetData( FORMATETC*,STGMEDIUM*);
	STDMETHODIMP GetDataHere( FORMATETC*,STGMEDIUM*);
	STDMETHODIMP QueryGetData( FORMATETC*);
	STDMETHODIMP GetCanonicalFormatEtc( FORMATETC*,FORMATETC*);
	STDMETHODIMP SetData( FORMATETC*,STGMEDIUM*,BOOL);
	STDMETHODIMP EnumFormatEtc( DWORD,IEnumFORMATETC**);
	STDMETHODIMP DAdvise( FORMATETC*,DWORD,IAdviseSink*,PDWORD);
	STDMETHODIMP DUnadvise( DWORD);
	STDMETHODIMP EnumDAdvise( IEnumSTATDATA**);

private:
	ULONG m_refCount;
	LPOLECLIENTSITE m_clientSite;
	LPOLEADVISEHOLDER m_OAHolder;
	LPDATAADVISEHOLDER m_ODAHolder;
};

#endif /* COMPONENT_H */
